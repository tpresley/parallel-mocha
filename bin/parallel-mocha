#!/usr/bin/env node

var program = require('commander')
  , fs = require('fs')
  , _ = require('underscore');

var Runner = require('../lib/runner');

program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .usage('[options] <files...>')
  .option('-p, --processes <n>', 'Set number of processes', parseInt)
  .option('-t, --timeout <n>', 'Timeout between tests', parseInt)
  .option('-s, --slow <n>', 'Wait for slow tests', parseInt)
  .option('-R, --reporter <reporter>', 'Set reporter (defaults: spec)')
  .option('-r, --require <library>', 'Require extra libraries like should')
  .option('-c, --compilers <compilers>', 'Add compilers like coffeescript')
  .option('-b, --bin <path>', 'Bin of mocha')
  .option('-i, --repeat <n>', 'Repeat tests', parseInt)
  .option('-S, --stagger <n>', 'Stagger tests', parseInt)
  .option('-d, --data <path>', 'Data file')
  .option('-I, --index <n>', 'Server index number (multiple test runners)', parseInt)
  .option('-o, --offset <n>', 'Number of records to skip in the data file', parseInt)
  .option('-z, --slave', 'Run in slave mode')
  .option('-B, --browser <name>', 'Name of browser to test against')
  .option('-O, --os <OS>', 'Operating system to test against')
  .option('-v, --browserversion <version>', 'Browser version to test against')
  .option('-x, --raw', 'Raw output')
  .parse(process.argv);

if(program.bin) {
  program.bin = [program.bin];
}

var options = {
  processes: program.processes || 20,
  timeout: program.timeout || 300000,
  slow: program.slow || 230000,
  reporter: program.reporter || 'spec',
  require: program.require,
  compilers: program.compilers,
  bin: program.bin || ['./node_modules/mocha/bin/mocha'],
  repeat: program.repeat || 1,
  stagger: program.stagger || 0,
  data: program.data || null,
  index: program.index || 1,
  offset: program.offset || 0,
  slave: program.slave || false,
  raw: program.raw || false
};

var paths = program.args

var runner = new Runner(paths, options);

runner.run(function(results) {
  if (!program.raw) {
    if (results.errors) {
      console.log("\n<<<<<<<<<<<< FAILED >>>>>>>>>>>>");
      console.log(results.errors + ' of ' + results.total + ' tests failed');
      process.exit(results.errors);
    } else {
      console.log("\n============ PASSED ============");
      console.log(results.total + ' tests ran');
    }
  }
});
